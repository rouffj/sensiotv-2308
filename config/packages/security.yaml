security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: false
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        #Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
            #algorithm: plaintext

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            form_login:
                provider: app_user_provider
                check_path: /login_check
                username_parameter:   _email
                default_target_path:  /?login=success
                failure_path:         /login?login=failed
            logout: ~
            #guard:
            #    authenticators:
            #        - App\Omdb\OmdbClient
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    role_hierarchy:
        ROLE_USER: ~
        ROLE_MODERATOR:
            - ROLE_USER
        ROLE_ADMIN:
            - ROLE_MODERATOR
            - ROLE_USER
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/movie/latest, roles: [ROLE_REPORTER, ROLE_MODERATOR] }
        #- { path: ^/movie, roles: [ROLE_USER] }

        # - { path: ^/profile, roles: ROLE_USER }
